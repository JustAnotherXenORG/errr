From 97d775f5f00c5e90b22db2a0f3c061b508decac1 Mon Sep 17 00:00:00 2001
From: xenxynon <flynryder427@gmail.com>
Date: Tue, 28 Jun 2022 01:16:31 +0000
Subject: [PATCH] [SQUASH]lavender: light: add support fot aidl light hal

Signed-off-by: xenxynon <flynryder427@gmail.com>

taken from  sdm660-common tree with the original commit history as follows

sdm660-common: Add AIDL Light HAL Support
* This change add support for Light HAL Implementation using AIDL

Change-Id: I444994ff1a1ca22134e7ef6db13043fd2c06e8a8
Signed-off-by: raiyanbinmohsin <raiyanbinmohsinshishir@gmail.com>

sdm660-common: Add null check for lights smart pointer
* lights smart pointer was used without null pointer check.
* This change adds null check.

Change-Id: Ifdd82290cfe4d7ca781adbed8c8a65961c70e244

sdm660-common: Update Lights HAL to return supported lights only.
* Add Lights in list only if its corresponding function pointer is available.
* Update map to store light id & function pointer.
* For Invalid Id , return operation not supported.

Change-Id: Id89345fec8b1dfb89bcfbd71c56063707ba6bb2d
CRs-Fixed: 2709805
Signed-off-by: raiyanbinmohsin <raiyanbinmohsinshishir@gmail.com>

sdm660-common: light: Move hidl to a seperate directory

Change-Id: If75aa890c24a60534c17d410bc2d1318c59cc5ec
Signed-off-by: raiyanbinmohsin <raiyanbinmohsinshishir@gmail.com>

sdm660-common: light: Extend hidl changes to aidl
* Changes authored by dianlujitao in  commits 7174356 ("Improve lights HAL") and f8e30fd ("Fix battery light not lit after  notification light off") are# Please enter the  commit message for your changes. Lines starting  adapted as following: Type(HIDL) -> id(AIDL) in functions and maps

 Note: Keep backlight in the map as per LineageOS/android_frameworks_base@b9e44e5, allowing SF to set backlight.

Change-Id: I8960a1fe0b44097e703f3f067d4e432a12d26fc3
Signed-off-by: raiyanbinmohsin <raiyanbinmohsinshishir@gmail.com>

sdm660-common: Adapt AIDL Light HAL for xiaomi_sdm660
* Re-apply old HIDL Light HAL changes
* Bring back set lcd backlight support, our devices doesn't support to set lcd backlight via hwcomposer

sdm660-common: light: Specify version for aidl_interface explicitly for S

[xenxynon] adapt to lavender:

Co-authored-by: Vinay Verma <vvinay@codeaurora.org>
Co-authored-by: Jignesh Mehta <jigneshm@codeaurora.org>
Co-authored-by: Benergy Meenan Ravuri <bravuri@codeaurora.org>
Co-authored-by: Pig <pig.priv@gmail.com>
Co-authored-by: dianlujitao <dianlujitao@lineageos.org>
Co-authored-by: Ratoriku <a1063021545@gmail.com>
Co-authored-by: Jeongik Cha <jeongik@google.com>
---
 light/Android.bp                              |  35 +--
 light/Light.cpp                               | 287 ------------------
 light/Light.h                                 |  68 -----
 light/Lights.cpp                              | 206 +++++++++++++
 light/Lights.h                                |  62 ++++
 ...oid.hardware.light@2.0-service.lavender.rc |  23 --
 ...id.hardware.light@2.0-service.lavender.xml |  11 -
 light/android.hardware.lights.lavender.rc     |  22 ++
 light/android.hardware.lights.lavender.xml    |   6 +
 light/main.cpp                                |  37 +++
 light/service.cpp                             |  50 ---
 11 files changed, 347 insertions(+), 460 deletions(-)
 delete mode 100644 light/Light.cpp
 delete mode 100644 light/Light.h
 create mode 100644 light/Lights.cpp
 create mode 100644 light/Lights.h
 delete mode 100644 light/android.hardware.light@2.0-service.lavender.rc
 delete mode 100644 light/android.hardware.light@2.0-service.lavender.xml
 create mode 100644 light/android.hardware.lights.lavender.rc
 create mode 100644 light/android.hardware.lights.lavender.xml
 create mode 100644 light/main.cpp
 delete mode 100644 light/service.cpp

diff --git a/light/Android.bp b/light/Android.bp
index 8690927..2e9c5b1 100644
--- a/light/Android.bp
+++ b/light/Android.bp
@@ -1,31 +1,24 @@
 //
-// Copyright (C) 2018 The LineageOS Project
+// Copyright (C) 2018 The Android Open Source Project
 //
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
+// SPDX-License-Identifier: Apache-2.0
 //
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
 
 cc_binary {
+    name: "android.hardware.lights-service.lavender",
     relative_install_path: "hw",
-    defaults: ["hidl_defaults"],
-    name: "android.hardware.light@2.0-service.lavender",
-    proprietary: true,
-    init_rc: ["android.hardware.light@2.0-service.lavender.rc"],
-    vintf_fragments: ["android.hardware.light@2.0-service.lavender.xml"],
-    srcs: ["service.cpp", "Light.cpp"],
+    init_rc: ["android.hardware.lights.lavender.rc"],
+    vintf_fragments: ["android.hardware.lights.lavender.xml"],
+    vendor: true,
     shared_libs: [
-        "libhardware",
-        "libhidlbase",
+        "libbase",
         "liblog",
-        "libutils",
-        "android.hardware.light@2.0",
+        "libhardware",
+        "libbinder_ndk",
+        "android.hardware.light-V1-ndk_platform",
+    ],
+    srcs: [
+        "Lights.cpp",
+        "main.cpp",
     ],
 }
diff --git a/light/Light.cpp b/light/Light.cpp
deleted file mode 100644
index fde6820..0000000
--- a/light/Light.cpp
+++ /dev/null
@@ -1,287 +0,0 @@
-/*
- * Copyright (C) 2018 The LineageOS Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#define LOG_TAG "LightService"
-
-#include <log/log.h>
-
-#include "Light.h"
-
-#include <fstream>
-
-#define LEDS            "/sys/class/leds/"
-
-#define LCD_LED         LEDS "lcd-backlight/"
-#define WHITE_LED       LEDS "red/"
-
-#define BLINK           "blink"
-#define BRIGHTNESS      "brightness"
-#define MAX_BRIGHTNESS  "max_brightness"
-#define DUTY_PCTS       "duty_pcts"
-#define PAUSE_HI        "pause_hi"
-#define PAUSE_LO        "pause_lo"
-#define RAMP_STEP_MS    "ramp_step_ms"
-#define START_IDX       "start_idx"
-
-/*
- * 15 duty percent steps.
- */
-#define RAMP_STEPS 15
-/*
- * Each step will stay on for 150ms by default.
- */
-#define RAMP_STEP_DURATION 150
-/*
- * Each value represents a duty percent (0 - 100) for the led pwm.
- */
-static int32_t BRIGHTNESS_RAMP[RAMP_STEPS] = {0, 12, 25, 37, 50, 72, 85, 100, 85, 72, 50, 37, 25, 12, 0};
-
-namespace {
-/*
- * Write value to path and close file.
- */
-static void set(std::string path, std::string value) {
-    std::ofstream file(path);
-
-    if (!file.is_open()) {
-        ALOGW("failed to write %s to %s", value.c_str(), path.c_str());
-        return;
-    }
-
-    file << value;
-}
-
-static void set(std::string path, int value) {
-    set(path, std::to_string(value));
-}
-
-static int get(std::string path) {
-    std::ifstream file(path);
-    int value;
-
-    if (!file.is_open()) {
-        ALOGW("failed to read from %s", path.c_str());
-        return 0;
-    }
-
-    file >> value;
-    return value;
-}
-
-static int getMaxBrightness(std::string path) {
-    int value = get(path);
-    ALOGW("Got max brightness %d", value);
-    return value;
-}
-
-static uint32_t getBrightness(const LightState& state) {
-    uint32_t alpha, red, green, blue;
-
-    /*
-     * Extract brightness from AARRGGBB.
-     */
-    alpha = (state.color >> 24) & 0xFF;
-    red = (state.color >> 16) & 0xFF;
-    green = (state.color >> 8) & 0xFF;
-    blue = state.color & 0xFF;
-
-    /*
-     * Scale RGB brightness using Alpha brightness.
-     */
-    red = red * alpha / 0xFF;
-    green = green * alpha / 0xFF;
-    blue = blue * alpha / 0xFF;
-
-    return (77 * red + 150 * green + 29 * blue) >> 8;
-}
-
-static inline uint32_t scaleBrightness(uint32_t brightness, uint32_t maxBrightness) {
-    if (brightness == 0) {
-        return 0;
-    }
-
-    return (brightness - 1) * (maxBrightness - 1) / (0xFF - 1) + 1;
-}
-
-static inline uint32_t getScaledBrightness(const LightState& state, uint32_t maxBrightness) {
-    return scaleBrightness(getBrightness(state), maxBrightness);
-}
-
-static void handleBacklight(const LightState& state) {
-    uint32_t brightness = getScaledBrightness(state, getMaxBrightness(LCD_LED MAX_BRIGHTNESS));
-    set(LCD_LED BRIGHTNESS, brightness);
-}
-
-/*
- * Scale each value of the brightness ramp according to the
- * brightness of the color.
- */
-static std::string getScaledRamp(uint32_t brightness) {
-    std::string ramp, pad;
-
-    for (auto const& step : BRIGHTNESS_RAMP) {
-        ramp += pad + std::to_string(step * brightness / 0xFF);
-        pad = ",";
-    }
-
-    return ramp;
-}
-
-static void handleNotification(const LightState& state) {
-    uint32_t whiteBrightness = getScaledBrightness(state, getMaxBrightness(WHITE_LED MAX_BRIGHTNESS));
-
-    /* Disable blinking */
-    set(WHITE_LED BLINK, 0);
-
-    if (state.flashMode == Flash::TIMED) {
-        /*
-         * If the flashOnMs duration is not long enough to fit ramping up
-         * and down at the default step duration, step duration is modified
-         * to fit.
-         */
-        int32_t stepDuration = RAMP_STEP_DURATION;
-        int32_t pauseHi = state.flashOnMs - (stepDuration * RAMP_STEPS * 2);
-        int32_t pauseLo = state.flashOffMs;
-
-        if (pauseHi < 0) {
-            //stepDuration = state.flashOnMs / (RAMP_STEPS * 2);
-            pauseHi = 0;
-        }
-
-        /* White */
-        set(WHITE_LED START_IDX, 0 * RAMP_STEPS);
-        set(WHITE_LED DUTY_PCTS, getScaledRamp(whiteBrightness));
-        set(WHITE_LED PAUSE_LO, pauseLo);
-        set(WHITE_LED PAUSE_HI, pauseHi);
-        set(WHITE_LED RAMP_STEP_MS, stepDuration);
-
-        /* Enable blinking */
-        set(WHITE_LED BLINK, 1);
-    } else {
-        set(WHITE_LED BRIGHTNESS, whiteBrightness);
-    }
-}
-
-static inline bool isStateLit(const LightState& state) {
-    return state.color & 0x00ffffff;
-}
-
-static inline bool isStateEqual(const LightState& first, const LightState& second) {
-    if (first.color == second.color && first.flashMode == second.flashMode &&
-            first.flashOnMs == second.flashOnMs &&
-            first.flashOffMs == second.flashOffMs &&
-            first.brightnessMode == second.brightnessMode) {
-        return true;
-    }
-
-    return false;
-}
-
-/* Keep sorted in the order of importance. */
-static std::vector<LightBackend> backends = {
-    { Type::ATTENTION, handleNotification },
-    { Type::NOTIFICATIONS, handleNotification },
-    { Type::BATTERY, handleNotification },
-    { Type::BACKLIGHT, handleBacklight },
-};
-
-static LightStateHandler findHandler(Type type) {
-    for (const LightBackend& backend : backends) {
-        if (backend.type == type) {
-            return backend.handler;
-        }
-    }
-
-    return nullptr;
-}
-
-static LightState findLitState(LightStateHandler handler) {
-    LightState emptyState;
-
-    for (const LightBackend& backend : backends) {
-        if (backend.handler == handler) {
-            if (isStateLit(backend.state)) {
-                return backend.state;
-            }
-
-            emptyState = backend.state;
-        }
-    }
-
-    return emptyState;
-}
-
-static void updateState(Type type, const LightState& state) {
-    for (LightBackend& backend : backends) {
-        if (backend.type == type) {
-            backend.state = state;
-        }
-    }
-}
-
-}  // anonymous namespace
-
-namespace android {
-namespace hardware {
-namespace light {
-namespace V2_0 {
-namespace implementation {
-
-Return<Status> Light::setLight(Type type, const LightState& state) {
-    /* Lock global mutex until light state is updated. */
-    std::lock_guard<std::mutex> lock(globalLock);
-
-    LightStateHandler handler = findHandler(type);
-    if (!handler) {
-        /* If no handler has been found, then the type is not supported. */
-        return Status::LIGHT_NOT_SUPPORTED;
-    }
-
-    /* Find the old state of the current handler. */
-    LightState oldState = findLitState(handler);
-
-    /* Update the cached state value for the current type. */
-    updateState(type, state);
-
-    /* Find the new state of the current handler. */
-    LightState newState = findLitState(handler);
-
-    if (isStateEqual(oldState, newState)) {
-        return Status::SUCCESS;
-    }
-
-    handler(newState);
-
-    return Status::SUCCESS;
-}
-
-Return<void> Light::getSupportedTypes(getSupportedTypes_cb _hidl_cb) {
-    std::vector<Type> types;
-
-    for (const LightBackend& backend : backends) {
-        types.push_back(backend.type);
-    }
-
-    _hidl_cb(types);
-
-    return Void();
-}
-
-}  // namespace implementation
-}  // namespace V2_0
-}  // namespace light
-}  // namespace hardware
-}  // namespace android
\ No newline at end of file
diff --git a/light/Light.h b/light/Light.h
deleted file mode 100644
index 6196e54..0000000
--- a/light/Light.h
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * Copyright (C) 2018 The LineageOS Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef ANDROID_HARDWARE_LIGHT_V2_0_LIGHT_H
-#define ANDROID_HARDWARE_LIGHT_V2_0_LIGHT_H
-
-#include <android/hardware/light/2.0/ILight.h>
-#include <hardware/lights.h>
-#include <hidl/Status.h>
-#include <map>
-#include <mutex>
-#include <vector>
-
-using ::android::hardware::Return;
-using ::android::hardware::Void;
-using ::android::hardware::light::V2_0::Flash;
-using ::android::hardware::light::V2_0::ILight;
-using ::android::hardware::light::V2_0::LightState;
-using ::android::hardware::light::V2_0::Status;
-using ::android::hardware::light::V2_0::Type;
-
-typedef void (*LightStateHandler)(const LightState&);
-
-struct LightBackend {
-    Type type;
-    LightState state;
-    LightStateHandler handler;
-
-    LightBackend(Type type, LightStateHandler handler) : type(type), handler(handler) {
-        this->state.color = 0xff000000;
-    }
-};
-
-namespace android {
-namespace hardware {
-namespace light {
-namespace V2_0 {
-namespace implementation {
-
-class Light : public ILight {
-  public:
-    Return<Status> setLight(Type type, const LightState& state) override;
-    Return<void> getSupportedTypes(getSupportedTypes_cb _hidl_cb) override;
-
-  private:
-    std::mutex globalLock;
-};
-
-}  // namespace implementation
-}  // namespace V2_0
-}  // namespace light
-}  // namespace hardware
-}  // namespace android
-
-#endif  // ANDROID_HARDWARE_LIGHT_V2_0_LIGHT_H
\ No newline at end of file
diff --git a/light/Lights.cpp b/light/Lights.cpp
new file mode 100644
index 0000000..01d244e
--- /dev/null
+++ b/light/Lights.cpp
@@ -0,0 +1,206 @@
+/*
+ * Copyright (C) 2018 The Android Open Source Project
+ * Copyright (C) 2020 The LineageOS Project
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+// Author := dev_harsh1998, Isaac Chen
+
+#define LOG_TAG "android.hardware.lights-service.lavender"
+/* #define LOG_NDEBUG 0 */
+
+#include "Lights.h"
+
+#include <android-base/file.h>
+#include <android-base/logging.h>
+#include <unistd.h>
+
+namespace {
+
+#define PPCAT_NX(A, B) A/B
+#define PPCAT(A, B) PPCAT_NX(A, B)
+#define STRINGIFY_INNER(x) #x
+#define STRINGIFY(x) STRINGIFY_INNER(x)
+
+#define LEDS(x) PPCAT(/sys/class/leds, x)
+#define LCD_ATTR(x) STRINGIFY(PPCAT(LEDS(lcd-backlight), x))
+#define WHITE_ATTR(x) STRINGIFY(PPCAT(LEDS(white), x))
+#define BUTTON_ATTR(x) STRINGIFY(PPCAT(LEDS(button-backlight), x))
+#define BUTTON1_ATTR(x) STRINGIFY(PPCAT(LEDS(button-backlight1), x))
+
+using ::android::base::ReadFileToString;
+using ::android::base::WriteStringToFile;
+
+// Default max brightness
+constexpr auto kDefaultMaxLedBrightness = 255;
+constexpr auto kDefaultMaxScreenBrightness = 4095;
+
+// Each step will stay on for 50ms by default.
+constexpr auto kRampStepDurationDefault = 50;
+
+// Write value to path and close file.
+bool WriteToFile(const std::string& path, uint32_t content) {
+    return WriteStringToFile(std::to_string(content), path);
+}
+
+bool WriteToFile(const std::string& path, const std::string& content) {
+    return WriteStringToFile(content, path);
+}
+
+uint32_t RgbaToBrightness(uint32_t color) {
+    // Extract brightness from AARRGGBB.
+    uint32_t alpha = (color >> 24) & 0xFF;
+
+    // Retrieve each of the RGB colors
+    uint32_t red = (color >> 16) & 0xFF;
+    uint32_t green = (color >> 8) & 0xFF;
+    uint32_t blue = color & 0xFF;
+
+    // Scale RGB colors if a brightness has been applied by the user
+    if (alpha != 0xFF) {
+        red = red * alpha / 0xFF;
+        green = green * alpha / 0xFF;
+        blue = blue * alpha / 0xFF;
+    }
+
+    return (77 * red + 150 * green + 29 * blue) >> 8;
+}
+
+inline uint32_t RgbaToBrightness(uint32_t color, uint32_t max_brightness) {
+    return RgbaToBrightness(color) * max_brightness / 0xFF;
+}
+
+inline bool IsLit(uint32_t color) {
+    return color & 0x00ffffff;
+}
+
+}  // anonymous namespace
+
+namespace aidl {
+namespace android {
+namespace hardware {
+namespace light {
+
+Lights::Lights() {
+std::map<int, std::function<void(int id, const HwLightState&)>> lights_{
+            {(int)LightType::NOTIFICATIONS,
+             [this](auto&&... args) { setLightNotification(args...); }},
+            {(int)LightType::BATTERY, [this](auto&&... args) { setLightNotification(args...); }},
+            {(int)LightType::BACKLIGHT, [this](auto&&... args) { setLightBacklight(args...); }}};
+
+    std::vector<HwLight> availableLights;
+    for (auto const& pair : lights_) {
+        int id = pair.first;
+        HwLight hwLight{};
+        hwLight.id = id;
+        availableLights.emplace_back(hwLight);
+    }
+    mAvailableLights = availableLights;
+    mLights = lights_;
+
+    std::string buf;
+
+    if (ReadFileToString(LCD_ATTR(max_brightness), &buf)) {
+        max_screen_brightness_ = std::stoi(buf);
+    } else {
+        max_screen_brightness_ = kDefaultMaxScreenBrightness;
+        LOG(ERROR) << "Failed to read max screen brightness, fallback to "
+                   << kDefaultMaxScreenBrightness;
+    }
+
+    if (ReadFileToString(WHITE_ATTR(max_brightness), &buf)) {
+        max_led_brightness_ = std::stoi(buf);
+    } else {
+        max_led_brightness_ = kDefaultMaxLedBrightness;
+        LOG(ERROR) << "Failed to read max LED brightness, fallback to " << kDefaultMaxLedBrightness;
+    }
+
+    if (!access(BUTTON_ATTR(brightness), W_OK)) {
+        lights_.emplace(std::make_pair((int)LightType::BUTTONS,
+                                       [this](auto&&... args) { setLightButtons(args...); }));
+        buttons_.emplace_back(BUTTON_ATTR(brightness));
+
+        if (!access(BUTTON1_ATTR(brightness), W_OK)) {
+            buttons_.emplace_back(BUTTON1_ATTR(brightness));
+        }
+
+        if (ReadFileToString(BUTTON_ATTR(max_brightness), &buf)) {
+            max_button_brightness_ = std::stoi(buf);
+        } else {
+            max_button_brightness_ = kDefaultMaxLedBrightness;
+            LOG(ERROR) << "Failed to read max button brightness, fallback to "
+                       << kDefaultMaxLedBrightness;
+        }
+    }
+}
+
+ndk::ScopedAStatus Lights::setLightState(int id, const HwLightState& state) {
+    auto it = mLights.find(id);
+    if (it == mLights.end()) {
+        LOG(ERROR) << "Light not supported";
+        return ndk::ScopedAStatus::fromExceptionCode(EX_UNSUPPORTED_OPERATION);
+    }
+
+    it->second(id, state);
+
+    return ndk::ScopedAStatus::ok();
+}
+
+ndk::ScopedAStatus Lights::getLights(std::vector<HwLight>* lights) {
+    for (auto i = mAvailableLights.begin(); i != mAvailableLights.end(); i++) {
+        lights->push_back(*i);
+    }
+    return ndk::ScopedAStatus::ok();
+}
+
+void Lights::setLightBacklight(int /*id*/, const HwLightState& state) {
+    uint32_t brightness = RgbaToBrightness(state.color, max_screen_brightness_);
+    WriteToFile(LCD_ATTR(brightness), brightness);
+}
+
+void Lights::setLightButtons(int /*id*/, const HwLightState& state) {
+    uint32_t brightness = RgbaToBrightness(state.color, max_button_brightness_);
+    for (auto&& button : buttons_) {
+        WriteToFile(button, brightness);
+    }
+}
+
+void Lights::setLightNotification(int id, const HwLightState& state) {
+    bool found = false;
+    for (auto&& [cur_id, cur_state] : notif_states_) {
+        if (cur_id == id) {
+            cur_state = state;
+        }
+
+        // Fallback to battery light
+        if (!found && (cur_id == (int)LightType::BATTERY || IsLit(cur_state.color))) {
+            found = true;
+            LOG(DEBUG) << __func__ << ": id=" << id;
+            applyNotificationState(cur_state);
+        }
+    }
+}
+
+void Lights::applyNotificationState(const HwLightState& state) {
+    uint32_t white_brightness = RgbaToBrightness(state.color, max_led_brightness_);
+
+    // Turn off the leds (initially)
+    WriteToFile(WHITE_ATTR(blink), 0);
+
+    if (state.flashMode == FlashMode::TIMED && state.flashOnMs > 0 && state.flashOffMs > 0) {
+        WriteToFile(WHITE_ATTR(ramp_step_ms),
+                    static_cast<uint32_t>(kRampStepDurationDefault)),
+        // White
+        WriteToFile(WHITE_ATTR(start_idx), 0);
+        WriteToFile(WHITE_ATTR(pause_lo), static_cast<uint32_t>(state.flashOffMs));
+        WriteToFile(WHITE_ATTR(blink), 1);
+    } else {
+        WriteToFile(WHITE_ATTR(brightness), white_brightness);
+    }
+}
+
+}  // namespace light
+}  // namespace hardware
+}  // namespace android
+}  // namespace aidl
diff --git a/light/Lights.h b/light/Lights.h
new file mode 100644
index 0000000..1814e08
--- /dev/null
+++ b/light/Lights.h
@@ -0,0 +1,62 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ * Copyright (C) 2020-2021 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#pragma once
+
+#include <aidl/android/hardware/light/BnLights.h>
+#include <hardware/hardware.h>
+#include <hardware/lights.h>
+#include <map>
+#include <sstream>
+
+namespace aidl {
+namespace android {
+namespace hardware {
+namespace light {
+
+class Lights : public BnLights {
+  public:
+    Lights();
+    ndk::ScopedAStatus setLightState(int id, const HwLightState& state) override;
+    ndk::ScopedAStatus getLights(std::vector<HwLight>* types) override;
+
+  private:
+    void setLightBacklight(int id, const HwLightState& state);
+    void setLightButtons(int id, const HwLightState& state);
+    void setLightNotification(int id, const HwLightState& state);
+    void applyNotificationState(const HwLightState& state);
+
+    uint32_t max_button_brightness_;
+    uint32_t max_led_brightness_;
+    uint32_t max_screen_brightness_;
+
+    std::map<int, std::function<void(int id, const HwLightState&)>> mLights;
+    std::vector<HwLight> mAvailableLights;
+
+    // Keep sorted in the order of importance.
+    std::array<std::pair<int, HwLightState>, 2> notif_states_ = {{
+            {(int)LightType::NOTIFICATIONS, {}},
+            {(int)LightType::BATTERY, {}},
+    }};
+
+    std::vector<std::string> buttons_;
+};
+
+}  // namespace light
+}  // namespace hardware
+}  // namespace android
+}  // namespace aidl
diff --git a/light/android.hardware.light@2.0-service.lavender.rc b/light/android.hardware.light@2.0-service.lavender.rc
deleted file mode 100644
index ee49abb..0000000
--- a/light/android.hardware.light@2.0-service.lavender.rc
+++ /dev/null
@@ -1,23 +0,0 @@
-on early-boot
-    chown system system /sys/class/leds/red/brightness
-    chown system system /sys/class/leds/red/blink
-    chown system system /sys/class/leds/red/duty_pcts
-    chown system system /sys/class/leds/red/pause_hi
-    chown system system /sys/class/leds/red/pause_lo
-    chown system system /sys/class/leds/red/ramp_step_ms
-    chown system system /sys/class/leds/red/start_idx
-
-    chmod 660 /sys/class/leds/red/blink
-    chmod 660 /sys/class/leds/red/duty_pcts
-    chmod 660 /sys/class/leds/red/pause_hi
-    chmod 660 /sys/class/leds/red/pause_lo
-    chmod 660 /sys/class/leds/red/ramp_step_ms
-    chmod 660 /sys/class/leds/red/start_idx
-
-service vendor.light-hal-2-0 /vendor/bin/hw/android.hardware.light@2.0-service.lavender
-    interface android.hardware.light@2.0::ILight default
-    class hal
-    user system
-    group system
-    # shutting off lights while powering-off
-    shutdown critical
diff --git a/light/android.hardware.light@2.0-service.lavender.xml b/light/android.hardware.light@2.0-service.lavender.xml
deleted file mode 100644
index 6bf62e9..0000000
--- a/light/android.hardware.light@2.0-service.lavender.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<manifest version="1.0" type="device">
-    <hal format="hidl">
-        <name>android.hardware.light</name>
-        <transport>hwbinder</transport>
-        <version>2.0</version>
-        <interface>
-            <name>ILight</name>
-            <instance>default</instance>
-        </interface>
-    </hal>
-</manifest>
diff --git a/light/android.hardware.lights.lavender.rc b/light/android.hardware.lights.lavender.rc
new file mode 100644
index 0000000..6fa56f9
--- /dev/null
+++ b/light/android.hardware.lights.lavender.rc
@@ -0,0 +1,22 @@
+on boot
+    # Notification LED
+    chown system system /sys/class/leds/white/blink
+    chown system system /sys/class/leds/white/brightness
+    chown system system /sys/class/leds/white/duty_pcts
+    chown system system /sys/class/leds/white/max_brightness
+    chown system system /sys/class/leds/white/pause_hi
+    chown system system /sys/class/leds/white/pause_lo
+    chown system system /sys/class/leds/white/ramp_step_ms
+    chown system system /sys/class/leds/white/start_idx
+
+    chown system system /sys/class/leds/button-backlight/max_brightness
+    chown system system /sys/class/leds/button-backlight1/brightness
+    chown system system /sys/class/leds/button-backlight1/max_brightness
+
+    chown system system /sys/class/leds/lcd-backlight/max_brightness
+
+service vendor.light /vendor/bin/hw/android.hardware.lights-service.lavender
+    class hal
+    user system
+    group system
+    shutdown critical
diff --git a/light/android.hardware.lights.lavender.xml b/light/android.hardware.lights.lavender.xml
new file mode 100644
index 0000000..db604d6
--- /dev/null
+++ b/light/android.hardware.lights.lavender.xml
@@ -0,0 +1,6 @@
+<manifest version="1.0" type="device">
+    <hal format="aidl">
+        <name>android.hardware.light</name>
+        <fqname>ILights/default</fqname>
+    </hal>
+</manifest>
diff --git a/light/main.cpp b/light/main.cpp
new file mode 100644
index 0000000..8509bfb
--- /dev/null
+++ b/light/main.cpp
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <android-base/logging.h>
+#include <android/binder_manager.h>
+#include <android/binder_process.h>
+#include "Lights.h"
+
+using ::aidl::android::hardware::light::Lights;
+
+int main() {
+    ABinderProcess_setThreadPoolMaxThreadCount(0);
+    std::shared_ptr<Lights> lights = ndk::SharedRefBase::make<Lights>();
+    if (!lights) {
+        return EXIT_FAILURE;
+    }
+
+    const std::string instance = std::string() + Lights::descriptor + "/default";
+    binder_status_t status = AServiceManager_addService(lights->asBinder().get(), instance.c_str());
+    CHECK(status == STATUS_OK);
+
+    ABinderProcess_joinThreadPool();
+    return EXIT_FAILURE;  // should not reached
+}
diff --git a/light/service.cpp b/light/service.cpp
deleted file mode 100644
index 5f972a2..0000000
--- a/light/service.cpp
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright (C) 2018 The LineageOS Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#define LOG_TAG "android.hardware.light@2.0-service.lavender"
-
-#include <hidl/HidlTransportSupport.h>
-
-#include "Light.h"
-
-using android::hardware::configureRpcThreadpool;
-using android::hardware::joinRpcThreadpool;
-
-using android::hardware::light::V2_0::ILight;
-using android::hardware::light::V2_0::implementation::Light;
-
-using android::OK;
-using android::sp;
-using android::status_t;
-
-int main() {
-    sp<ILight> service = new Light();
-
-    configureRpcThreadpool(1, true);
-
-    status_t status = service->registerAsService();
-    if (status != OK) {
-        ALOGE("Cannot register Light HAL service.");
-        return 1;
-    }
-
-    ALOGI("Light HAL service ready.");
-
-    joinRpcThreadpool();
-
-    ALOGI("Light HAL service failed to join thread pool.");
-    return 1;
-}
\ No newline at end of file
